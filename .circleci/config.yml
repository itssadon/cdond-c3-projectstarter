version: 2.1

executors:
  node:
    docker:
      - image: cimg/node:13.8.0
  python:
    docker:
      - image: python:3.9.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli

orbs:
  aws-cli: circleci/aws-cli@3.1.1
  node: circleci/node@5.0.2

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy backend stack
          when: on_fail
          command: aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
          environment:
            TERM: xterm-256color
      - run:
          name: Destroy frontend stack
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
          environment:
            TERM: xterm-256color

  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          working_directory: ./backend
          # command: |
          #   SUCCESS=$(curl --insecure https://kvdb.io/9BE2wMaNxe2wCecHbxFUuY/migration_<< parameters.workflow_id >>)
          #   echo $SUCCESS
          #   if (( $SUCCESS == 1 ));
          #   then
          #     npm install
          #     npm run migrations:revert
          #   fi
          command: |
            npm install
            npm run migrations:revert
            npm run migrations:revert
            npm run migrations:revert
          environment:
            TERM: xterm-256color

  destroy_prometheus_environment:
    description: Destroy prometheus cloudformation stack given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: aws cloudformation delete-stack --stack-name udapeople-prometheus-<< parameters.workflow_id >>
          environment:
            TERM: xterm-256color

jobs:
  install-frontend-dependencies:
    executor: node
    steps:
      - checkout
      - run:
          name: Install frontent dependencies
          working_directory: ./frontend
          command: ls -la && npm install
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  install-backend-dependencies:
    executor: node
    steps:
      - checkout
      - run:
          name: Install backend dependencies
          working_directory: ./backend
          command: ls -la && npm install
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  build-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Build front-end
          working_directory: ./frontend
          command: npm run build

  build-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Build back-end
          working_directory: ./backend
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist

  test-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Run frontend test
          working_directory: ./frontend
          command: npm run test

  test-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Run backend test
          working_directory: ./backend
          command: npm run test

  scan-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Check Frontend against security vulnerabilities
          working_directory: ./frontend
          command: |
            npm install
            npm audit fix --audit-level=critical

  scan-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Check Backend against security vulnerabilities
          working_directory: ./backend
          command: |
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: yum install -y tar gzip
      - run:
          name: Deploy backend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Save backend IP in kvdb
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            curl https://kvdb.io/9BE2wMaNxe2wCecHbxFUuY/backend_ip_${CIRCLE_WORKFLOW_ID:0:7} -d ${BACKEND_IP}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
      - run:
          name: Deploy frontend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "5c:b0:d2:b6:07:d4:0a:9a:d0:d9:4e:9d:e0:7b:3f:82"
      - attach_workspace:
          at: .
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Install ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd &&
            ls -la
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully." migrations_dump.txt
            then
              echo "DB migration was successful, will update memstash..."
              curl https://kvdb.io/9BE2wMaNxe2wCecHbxFUuY/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            else
              echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
            fi
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Get backend url
          working_directory: ./frontend
          command: |
            BACKEND_IP=$(curl --insecure https://kvdb.io/9BE2wMaNxe2wCecHbxFUuY/backend_ip_${CIRCLE_WORKFLOW_ID:0:7})
            export BACKEND_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${BACKEND_URL}"
            echo API_URL="${BACKEND_URL}" >> .env
            cat .env
      - run:
          name: Rebuild frontend with backend API Url
          working_directory: ./frontend
          command: npm run build
      - run:
          name: Deploy frontend objects to s3
          working_directory: ./frontend
          command: |
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    executor: python
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - add_ssh_keys:
          fingerprints:
            - "5c:b0:d2:b6:07:d4:0a:9a:d0:d9:4e:9d:e0:7b:3f:82"
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible curl rsync openssh nodejs npm bash
            ansible --version
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Zip the backend directory
          command: |
            pwd &&
            ls -la
            tar -C backend -czvf artifact.tar.gz .
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml -v
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    executor: python
    steps:
      - checkout
      - aws-cli/setup:
          profile-name: default
      - run:
          name: Install dependencies
          command: apk add --update curl nodejs npm
      - run:
          name: Get backend url and Run backend smoke test
          command: |
            BACKEND_IP=$(curl --insecure https://kvdb.io/9BE2wMaNxe2wCecHbxFUuY/backend_ip_${CIRCLE_WORKFLOW_ID:0:7})
            API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  prepare-prometheus-config:
    executor: aws
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["5c:b0:d2:b6:07:d4:0a:9a:d0:d9:4e:9d:e0:5b:3f:82"]
      - run:
          name: Install tar and gzip
          command: yum install -y tar gzip
      # - run:
      #     name: Create prometheus infrastructure
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/prometheus.yml \
      #         --stack-name udapeople-prometheus-${CIRCLE_WORKFLOW_ID:0:5} \
      #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --tags project=udapeople-prometheus-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Save prometheus server IP in kvdb
          command: |
            PROMETHEUS_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-prometheus" \
              --output text)
            curl https://kvdb.io/9BE2wMaNxe2wCecHbxFUuY/prometheus_ip -d ${PROMETHEUS_IP}
      - run:
          name: Add prometheus server IP to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-prometheus" \
              --output text >> .circleci/ansible/monitoring-inventory.txt
      - run:
          name: prepare prometheus configuration
          command: |
            echo \
            "global:
              scrape_interval: 1s
              evaluation_interval: 1s
              external_labels:
                monitor: "prometheus"

            scrape_configs:
              - job_name: "node"
                ec2_sd_configs:
                  - region: us-east-1
                    access_key: ${AWS_ACCESS_KEY_ID}
                    secret_key: ${AWS_SECRET_ACCESS_KEY}
                    port: 9100" > .circleci/ansible/roles/configure-prometheus/files/prometheus.yml
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/monitoring-inventory.txt
            - .circleci/ansible/roles/configure-prometheus/files/prometheus.yml
      # - destroy_prometheus_environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-prometheus-infrastructure:
    executor: python
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: apk add --no-cache tar gzip
      - aws-cli/setup:
          profile-name: default
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints: ["5c:b0:d2:b6:07:d4:0a:9a:d0:d9:4e:9d:e0:5b:3f:82"]
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure prometheus server
          working_directory: ./.circleci/ansible
          command: |
            pwd &&
            ls -la
            cat monitoring-inventory.txt
            ansible-playbook -i monitoring-inventory.txt configure-prometheus.yml
      # - destroy_prometheus_environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cloudfront-update:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs npm
      - run:
          name: Store old WorkflowID in kvbd for cleanup phase
          working_directory: ./.circleci/files
          command: |
            WorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            curl https://kvdb.io/9BE2wMaNxe2wCecHbxFUuY/WorkflowID -d $WorkflowID
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert_migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs npm
      - run:
          name: Get old stack workflow id and Remove old stacks/files
          command: |
            OldWorkflowID=$(curl --insecure https://kvdb.io/9BE2wMaNxe2wCecHbxFUuY/WorkflowID)
            echo "OldWorkflowID = ${OldWorkflowID}"

            CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
            if [[ "$CurrentWorkflowID" != "${OldWorkflowID}" ]]
            then
              echo "${OldWorkflowID}!=$CurrentWorkflowID => will delete old version"

              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            else
              echo "$OldWorkflowID==$CurrentWorkflowID => nothing needs to be done..."
            fi

workflows:
  default:
    jobs:
      - install-backend-dependencies
      - install-frontend-dependencies
      - build-backend:
          requires:
            - install-backend-dependencies
      - build-frontend:
          requires:
            - install-frontend-dependencies
      - test-backend:
          requires:
            - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - deploy-infrastructure:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - configure-infrastructure
      - deploy-backend:
          requires:
            - run-migrations
      - deploy-frontend:
          requires:
            - run-migrations
      - smoke-test:
          requires:
            - deploy-backend
            - deploy-frontend
      - prepare-prometheus-config:
          requires:
            - smoke-test
      - configure-prometheus-infrastructure:
          requires:
            - prepare-prometheus-config
      - cloudfront-update:
          requires:
            - smoke-test
      - cleanup:
          requires:
            - cloudfront-update
